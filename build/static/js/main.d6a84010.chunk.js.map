{"version":3,"sources":["component/blackjack.js","index.js"],"names":["Card","props","suit","className","notation","Hand","rows","i","this","hand","length","faceDownCard","push","renderHand","React","Component","Game","cards","generateDeck","playerHand","dealerHand","getRandomCard","playerHandVal","getHandValue","dealerHandVal","state","gameStatus","status","playerMode","playerHandValue","dealerHandValue","slice","newCard","setState","randomCard","compareHands","id","onClick","onStand","onHit","onReset","numOfDecks","j","val","value","len","randomIdx","Math","floor","random","retObj","splice","handObj","handVal","numOfAces","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6a84010.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n\r\n//Renders card object\r\nfunction Card(props){\r\n    if(props.suit === \"hearts\"){\r\n        return(\r\n            <div className=\"hands\">\r\n                {props.notation} \r\n                <span>&hearts;</span>\r\n            </div>\r\n        );\r\n    }\r\n    if(props.suit === \"spades\"){\r\n        return(\r\n            <div className=\"hands\">\r\n                {props.notation} \r\n                <span>&spades;</span>\r\n            </div>\r\n        );\r\n    }\r\n    if(props.suit === \"clubs\"){\r\n        return(\r\n            <div className=\"hands\">\r\n                {props.notation} \r\n                <span>&clubs;</span>\r\n            </div>\r\n        );\r\n    }\r\n    if(props.suit === \"diamonds\"){\r\n        return(\r\n            <div className=\"hands\">\r\n                {props.notation} \r\n                <span>&diams;</span>\r\n            </div>\r\n        );\r\n    }\r\n    if(props.suit === \"face-down\"){\r\n        return(\r\n            <div className=\"hands\">\r\n                ####\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Renders dealer and player hands\r\nclass Hand extends React.Component{\r\n    renderHand(){\r\n        const rows = [];\r\n        for(let i=0; i<this.props.hand.length; i++) {\r\n            //initial dace down card for dealer\r\n            if(this.props.faceDownCard && i===1){\r\n                rows.push(<Card key={this.props.hand[i].notation+this.props.hand[i].suit} notation={this.props.hand[i].notation} suit={'face-down'} />);\r\n            }else{\r\n                rows.push(<Card key={this.props.hand[i].notation+this.props.hand[i].suit} notation={this.props.hand[i].notation} suit={this.props.hand[i].suit} />);\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"flex-center flex-row\">{this.renderHand()}</div>\r\n        );\r\n    }\r\n}\r\n\r\n//React component game\r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.cards = generateDeck(1);\r\n        let playerHand = [], dealerHand = [];\r\n        //Initializing the initial hands for player and dealer\r\n        playerHand.push(getRandomCard(this.cards))\r\n        playerHand.push(getRandomCard(this.cards))\r\n        dealerHand.push(getRandomCard(this.cards))\r\n        dealerHand.push(getRandomCard(this.cards))\r\n\r\n        let playerHandVal = getHandValue(playerHand);\r\n        let dealerHandVal = getHandValue(dealerHand);\r\n\r\n        //if player hits 21 in the initial hand then BlackJack\r\n        if(playerHandVal === 21){\r\n            this.state = {\r\n                playerHand: playerHand,\r\n                dealerHand: dealerHand,\r\n                gameStatus: {status:\"BlackJack\", playerMode: false},\r\n                playerHandValue: playerHandVal,\r\n                dealerHandValue: dealerHandVal\r\n            }\r\n        }else{\r\n            this.state = {\r\n                playerHand: playerHand,\r\n                dealerHand: dealerHand,\r\n                gameStatus: {status:\"In Progress\", playerMode: true},\r\n                playerHandValue: playerHandVal,\r\n                dealerHandValue: dealerHandVal\r\n            }\r\n        }\r\n    }\r\n\r\n    //functionality to handle game option hit\r\n    onHit(){\r\n        //if player already busted or standed then no action\r\n        if(!this.state.gameStatus.playerMode){\r\n            return;\r\n        }\r\n        let playerHandVal = getHandValue(this.state.playerHand);\r\n        if(playerHandVal<=21){\r\n            let playerHand = this.state.playerHand.slice(); //Maintaining immutibility of the state object by getting a copy of object and then modifying\r\n            let newCard = getRandomCard(this.cards);\r\n            playerHand.push(newCard);   //added new card to the player's hand\r\n            playerHandVal = getHandValue(playerHand);\r\n            //update the state according to the player's hand value\r\n            if(playerHandVal > 21){\r\n                this.setState({playerHand: playerHand, gameStatus: {status: \"Busted\", playerMode:false}, playerHandValue: playerHandVal});\r\n            } else{\r\n                this.setState({playerHand: playerHand, playerHandValue: playerHandVal});\r\n            }\r\n        }\r\n    }\r\n\r\n    //functionality to handle game option stand\r\n    onStand(){\r\n        if(!this.state.gameStatus.playerMode){\r\n            return;\r\n        }\r\n        //dealer auto play logic\r\n        let dealerHandVal = getHandValue(this.state.dealerHand);\r\n        //dealer stands on 17, no card added to dealer's hand after the hand value reaches or crosses 17\r\n        while(dealerHandVal<17){\r\n            let dealerHand = this.state.dealerHand.slice();\r\n            let randomCard = getRandomCard(this.cards);\r\n            dealerHand.push(randomCard);\r\n            dealerHandVal = getHandValue(dealerHand);\r\n            this.setState({dealerHand: dealerHand, dealerHandValue: dealerHandVal});\r\n        }\r\n        //compatring the player and dealer hand to get the game status\r\n        let gameStatus = compareHands({playerHand: this.state.playerHand, dealerHand: this.state.dealerHand});\r\n        this.setState({gameStatus: {status: gameStatus, playerMode:false}});\r\n    }\r\n\r\n    //Resetting the complete game status to initial state\r\n    onReset(){\r\n        this.cards = generateDeck(1);\r\n        let playerHand = [], dealerHand = [];\r\n        playerHand.push(getRandomCard(this.cards))\r\n        playerHand.push(getRandomCard(this.cards))\r\n        dealerHand.push(getRandomCard(this.cards))\r\n        dealerHand.push(getRandomCard(this.cards))\r\n\r\n        let playerHandVal = getHandValue(playerHand);\r\n        let dealerHandVal = getHandValue(dealerHand);\r\n\r\n        if(playerHandVal === 21){\r\n            this.setState({\r\n                playerHand: playerHand,\r\n                dealerHand: dealerHand,\r\n                gameStatus: {status:\"BlackJack\", playerMode: false},\r\n                playerHandValue: playerHandVal,\r\n                dealerHandValue: dealerHandVal\r\n            });\r\n        }else{\r\n            this.setState({\r\n                playerHand: playerHand,\r\n                dealerHand: dealerHand,\r\n                gameStatus: {status:\"In Progress\", playerMode: true},\r\n                playerHandValue: playerHandVal,\r\n                dealerHandValue: dealerHandVal\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let status = this.state.gameStatus.status;\r\n        let faceDownCard = this.state.gameStatus.playerMode ? true : false;\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"flex-center flex-column\">\r\n                    <div className=\"flex-center flex-row\">\r\n                        <h1>Dealer</h1>\r\n                    </div>\r\n                    <Hand hand={this.state.dealerHand} faceDownCard={faceDownCard} />                    \r\n                </div>\r\n\r\n                <div className=\"flex-center flex-column\">\r\n                    <div className=\"flex-center flex-row\">\r\n                        <div className=\"game-options\">\r\n                            <button id=\"btnstand\" className=\"btn\" onClick={()=>this.onStand(this)}>Stand</button>\r\n                            <button id=\"btnhit\" className=\"btn\" onClick={()=>this.onHit(this)}>Hit</button>\r\n                            <button id=\"btnreset\" className=\"btn\" onClick={()=>this.onReset(this)}>Reset</button>                                                       \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"status flex-center flex-row\">                        \r\n                        <h1>Game Status: {status}</h1>                                                                                \r\n                    </div>\r\n                </div>                                \r\n\r\n                <div className=\"flex-center flex-column\">\r\n                    <div className=\"flex-center flex-row\">\r\n                        <h1>Player</h1>\r\n                    </div>\r\n                    <Hand hand={this.state.playerHand} faceDownCard={false}/>                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//generates and returns a card deck\r\nfunction generateDeck(numOfDecks = 1){\r\n    let cards = [];\r\n    for(let i=0; i<numOfDecks; i++){\r\n        for(let j=0; j<13; j++){\r\n            let notation = '', val;\r\n            if(j<9){\r\n                notation += j+2;\r\n                val = j+2;\r\n            }\r\n            if(j===9){\r\n                notation = 'J';\r\n                val = 10\r\n            }\r\n            if(j===10){\r\n                notation = 'Q';\r\n                val = 10\r\n            }\r\n            if(j===11){\r\n                notation = 'K';\r\n                val = 10\r\n            }\r\n            if(j===12){\r\n                notation = 'A';\r\n                val = 11\r\n            }\r\n            cards.push({\r\n                notation: notation, suit: 'hearts', value: val,\r\n            })\r\n            cards.push({\r\n                notation: notation, suit: 'spades', value: val,\r\n            })\r\n            cards.push({\r\n                notation: notation, suit: 'clubs', value: val,\r\n            })\r\n            cards.push({\r\n                notation: notation, suit: 'diamonds', value: val,\r\n            })\r\n        }\r\n    }\r\n    return cards;\r\n}\r\n\r\n//draws random card from the card deck and updates the card deck\r\nfunction getRandomCard(cards){\r\n    let len = cards.length;\r\n    let randomIdx = Math.floor((Math.random()*1000)%len);\r\n    let retObj = cards[randomIdx];\r\n    cards.splice(randomIdx, 1);\r\n    return retObj;\r\n}\r\n\r\n//calculates hand value and considers ace value 1 or 11 as per the hand benefits\r\nfunction getHandValue(handObj){\r\n    let handVal = 0, numOfAces = 0;\r\n    for(let i=0; i<handObj.length; i++){\r\n        if(handObj[i].notation === 'A'){\r\n            numOfAces += 1;\r\n        }\r\n        handVal += handObj[i].value;\r\n        if(handVal > 21 && numOfAces > 0){\r\n            handVal -= numOfAces * 10;\r\n            numOfAces -= 1\r\n        }\r\n    }\r\n    return handVal;\r\n}\r\n\r\n//compares player and dealer hand to decide the winner\r\nfunction compareHands(props){\r\n    let playerHandVal = getHandValue(props.playerHand);\r\n    let dealerHandVal = getHandValue(props.dealerHand);\r\n    if(playerHandVal > 21){\r\n        return \"Busted\";\r\n    }\r\n    if(playerHandVal <=21 && dealerHandVal <=21 && playerHandVal === dealerHandVal){\r\n        return \"Tie (Push)\";\r\n    }\r\n    if( (playerHandVal <=21 && playerHandVal > dealerHandVal) || dealerHandVal > 21){\r\n        return \"Won\";\r\n    }\r\n    if( (dealerHandVal <=21 && dealerHandVal > playerHandVal) || playerHandVal > 21){\r\n        return \"Lost\";\r\n    }\r\n}\r\n\r\nexport {Game, Hand, Card, generateDeck, getRandomCard, getHandValue, compareHands};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Game} from './component/blackjack'\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}